#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');
const socket_io = require('socket.io');
const formatMsg = require('../utils/messages');
const { userJoin, getUser, userLeave, getRoomUsers } = require('../utils/users');
const { use } = require('../routes');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// create socket
const io = socket_io(server);

// run socket on client connection
io.on('connection', socket => {
    console.log('New connection at: ' + port);


    socket.on('disconnect', () => {
        const user = userLeave(socket.id);

        if(user){
            // send user list and room data to client
            io
                .to(user.room)
                .emit('roomInfo', {
                    room: user.room,
                    users: getRoomUsers(user.room)
                });
            // user exists send msg to client
            io
                .to(user.room)
                .emit('message', formatMsg('ChatBot', `${user.username} has left the chat.`));
        }
    });

    socket.on('joinRoom', ({username, room}) => {
        const user = userJoin(socket.id, username, room);

        socket.join(user.room);

        //welcome message
        socket.emit('message', formatMsg('ChatBot', `Welcome ${user.username}`));

        //notify all when client connects
        socket.broadcast
            .to(user.room)
            .emit('message', formatMsg('ChatBot', `${user.username} has joined the chat`));

        // send user list and room data to client
        io
            .to(user.room)
            .emit('roomInfo', {
                room: user.room,
                users: getRoomUsers(user.room)
            });
    });

    socket.on('chatMessage', (msg) => {
        io.emit('message', formatMsg('User', msg));
    });
    
});








/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
